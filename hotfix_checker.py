import streamlit as st
import pandas as pd
from io import BytesIO

st.title("üîç –°–≤–µ—Ä–∫–∞ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ –∏ –≤–µ—Ç–æ–∫ Hotfix")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def extract_component_from_branch(branch_path: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ø—É—Ç–∏ –≤–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    modules/rskp/rskp-monitoring-front/hotfix/2.1.2 ‚Üí rskp-monitoring-front
    """
    parts = branch_path.strip().split('/')
    for part in reversed(parts):
        if "-" in part:
            return part
    return parts[-1] if parts else branch_path.strip()

def extract_component_from_distribution(dist_line: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞:
    rskp-monitoring-front: hotfix_2.1.2-xxxx ‚Üí rskp-monitoring-front
    """
    return dist_line.strip().split(":")[0].strip()

def to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Excel –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

def load_mapping_from_file(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º."""
    try:
        return pd.read_excel(uploaded_file, engine="openpyxl")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return pd.DataFrame(columns=["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤"])

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---

branches_input = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
dists_input = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º (2 –∫–æ–ª–æ–Ω–∫–∏: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤)", type=["xlsx"])

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

if uploaded_file:
    mapping_df = load_mapping_from_file(uploaded_file)
    st.session_state.mapping_df = mapping_df  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é

    branch_list = [line for line in branches_input.strip().splitlines() if line]
    dist_list = [line for line in dists_input.strip().splitlines() if line]

    branch_components = [extract_component_from_branch(b) for b in branch_list]
    distribution_components = [extract_component_from_distribution(d) for d in dist_list]

    mapping_dict = dict(zip(mapping_df["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç"], mapping_df["–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤"]))

    missing_distributions = []
    unmapped_branches = []
    unmapped_distributions = []
    checked_components = []

    for comp in branch_components:
        if comp not in mapping_dict:
            unmapped_branches.append(comp)
        else:
            expected_dist = mapping_dict[comp]
            checked_components.append(comp)
            if expected_dist not in distribution_components:
                missing_distributions.append(expected_dist)

    for dist in distribution_components:
        if dist not in mapping_dict.values():
            unmapped_distributions.append(dist)

    if st.button("üß™ –°–≤–µ—Ä–∫–∞"):
        if missing_distributions:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–µ—Ç–∫–∞–º:")
            st.code("\n".join(missing_distributions))
        else:
            st.success("‚úÖ –í—Å—ë –û–ö! –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã –ø–æ –≤–µ—Ç–∫–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

        if unmapped_branches or unmapped_distributions:
            st.error("‚ùå –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ —É—á—Ç—ë–Ω–Ω—ã–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ.")
            if unmapped_branches:
                st.write("üî∏ –ù–µ—É—á—Ç—ë–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –≤–µ—Ç–æ–∫:")
                st.code("\n".join(unmapped_branches))
            if unmapped_distributions:
                st.write("üî∏ –ù–µ—É—á—Ç—ë–Ω–Ω—ã–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã:")
                st.code("\n".join(unmapped_distributions))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        st.write("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥:")
        st.dataframe(mapping_df)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –≤ Excel",
            data=to_excel(mapping_df),
            file_name="mapping_hotfix.xlsx"
        )
